//
//  UpdatedAssessmentSetupView.swift
//  running_app
//
//  Í∏∞Ï°¥ AssessmentSetupViewÎ•º ÏûÑÏãú Îç∞Ïù¥ÌÑ∞Î°ú ÎèôÏûëÌïòÎèÑÎ°ù ÏàòÏ†ï
//

import SwiftUI

struct AssessmentSetupView: View {
    @StateObject private var assessmentManager = FitnessAssessmentManager.shared
    @EnvironmentObject var dataManager: RunningDataManager
    @Environment(\.dismiss) private var dismiss
    
    @State private var currentStep = 0
    @State private var showingMockAssessment = false
    
    private let totalSteps = 3
    
    var body: some View {
        NavigationView {
            ZStack {
                // Î∞∞Í≤Ω
                LinearGradient(
                    gradient: Gradient(colors: [Color.green.opacity(0.1), Color.blue.opacity(0.1)]),
                    startPoint: .topLeading,
                    endPoint: .bottomTrailing
                )
                .ignoresSafeArea()
                
                VStack(spacing: 0) {
                    // ÏßÑÌñâÎ•† Ìó§Îçî
                    AssessmentProgressHeader(currentStep: currentStep, totalSteps: totalSteps)
                    
                    // Îã®Í≥ÑÎ≥Ñ ÏΩòÌÖêÏ∏†
                    TabView(selection: $currentStep) {
                        AssessmentWelcomeView()
                            .tag(0)
                        
                        AssessmentInstructionView()
                            .tag(1)
                        
                        UpdatedAssessmentReadyView(onStartAssessment: {
                            startMockAssessment()
                        })
                            .tag(2)
                    }
                    .tabViewStyle(PageTabViewStyle(indexDisplayMode: .never))
                    .animation(.easeInOut, value: currentStep)
                    
                    // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î≤ÑÌäº
                    AssessmentNavigationButtons(
                        currentStep: $currentStep,
                        totalSteps: totalSteps,
                        onComplete: startMockAssessment
                    )
                }
            }
            .navigationBarHidden(true)
        }
        .fullScreenCover(isPresented: $showingMockAssessment) {
            MockAssessmentStartView()
        }
    }
    
    private func startMockAssessment() {
        print("üé≠ ÏûÑÏãú ÌèâÍ∞Ä Î™®Îìú ÏãúÏûë")
        dismiss()
        
        // 0.5Ï¥à ÌõÑÏóê ÏûÑÏãú ÌèâÍ∞Ä ÌôîÎ©¥ ÌëúÏãú
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            showingMockAssessment = true
        }
    }
}

// MARK: - ÏóÖÎç∞Ïù¥Ìä∏Îêú Ï§ÄÎπÑ ÌôîÎ©¥
struct UpdatedAssessmentReadyView: View {
    let onStartAssessment: () -> Void
    @State private var isReady = false
    @StateObject private var profileManager = UserProfileManager.shared
    
    var zone2HeartRateRange: ClosedRange<Double> {
        let profile = profileManager.userProfile
        let heartRateZones = profile.heartRateZones
        return heartRateZones.zone2
    }
    
    var body: some View {
        VStack(spacing: 30) {
            VStack(spacing: 12) {
                Text("Zone 2 ÌèâÍ∞Ä ÏãúÏûë Ï§ÄÎπÑ")
                    .font(.title2)
                    .fontWeight(.bold)
                
                Text("Î™®Îì† Ï§ÄÎπÑÍ∞Ä ÏôÑÎ£åÎêòÎ©¥\n'ÏãúÏûëÌïòÍ∏∞' Î≤ÑÌäºÏùÑ ÎàåÎü¨Ï£ºÏÑ∏Ïöî")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
            }
            .padding(.top)
            
            // Zone 2 Î≤îÏúÑ Î¶¨ÎßàÏù∏Îçî
            VStack(spacing: 12) {
                Text("Î™©Ìëú Ïã¨Î∞ïÏàò Î≤îÏúÑ")
                    .font(.headline)
                    .fontWeight(.semibold)
                
                HStack {
                    Text("\(Int(zone2HeartRateRange.lowerBound))")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                        .foregroundColor(.red)
                    
                    Text("~")
                        .font(.title)
                        .foregroundColor(.secondary)
                    
                    Text("\(Int(zone2HeartRateRange.upperBound))")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                        .foregroundColor(.red)
                    
                    Text("bpm")
                        .font(.title2)
                        .foregroundColor(.secondary)
                }
                
                Text("Ïù¥ Î≤îÏúÑÎ•º Ïú†ÏßÄÌïòÎ©¥ÏÑú ÏµúÎåÄÌïú Ïò§Îûò Îã¨Î†§Ï£ºÏÑ∏Ïöî")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
            }
            .padding()
            .background(Color.red.opacity(0.1))
            .cornerRadius(12)
            
            VStack(spacing: 20) {
                MockReadyCheckItem(
                    icon: "checkmark.circle.fill",
                    title: "ÏûÑÏãú ÌèâÍ∞Ä Î™®Îìú",
                    subtitle: "ÏõåÏπò Ïó∞Í≤∞ ÏóÜÏù¥ ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞Î°ú ÏßÑÌñâ",
                    isChecked: true
                )
                
                MockReadyCheckItem(
                    icon: "checkmark.circle.fill",
                    title: "ÏûêÎèô ÌèâÍ∞Ä ÏôÑÎ£å",
                    subtitle: "3Ï¥à ÌõÑ ÏûêÎèôÏúºÎ°ú ÌèâÍ∞Ä Í≤∞Í≥º ÏÉùÏÑ±",
                    isChecked: true
                )
                
                MockReadyCheckItem(
                    icon: "checkmark.circle.fill",
                    title: "Î™©Ìëú ÏÑ§Ï†ï ÏôÑÎ£å",
                    subtitle: "Í∞úÏù∏ ÎßûÏ∂§ Î™©Ìëú ÏûêÎèô ÏÉùÏÑ±",
                    isChecked: true
                )
                
                MockReadyCheckItem(
                    icon: "checkmark.circle.fill",
                    title: "ÌôîÎ©¥ ÌÖåÏä§Ìä∏ Ï§ÄÎπÑ",
                    subtitle: "Î™®Îì† UI Ïª¥Ìè¨ÎÑåÌä∏ ÌôïÏù∏ Í∞ÄÎä•",
                    isChecked: true
                )
            }
            
            VStack(spacing: 16) {
                Toggle("ÏûÑÏãú ÌèâÍ∞Ä Î™®Îìú Ï§ÄÎπÑ ÏôÑÎ£å", isOn: $isReady)
                    .toggleStyle(SwitchToggleStyle(tint: .red))
                
                if isReady {
                    Button(action: onStartAssessment) {
                        HStack {
                            Image(systemName: "play.circle.fill")
                            Text("ÏûÑÏãú Zone 2 ÌèâÍ∞Ä ÏãúÏûë")
                        }
                        .font(.headline)
                        .foregroundColor(.white)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(
                            LinearGradient(
                                gradient: Gradient(colors: [Color.red, Color.orange]),
                                startPoint: .leading,
                                endPoint: .trailing
                            )
                        )
                        .cornerRadius(12)
                    }
                    .transition(.scale.combined(with: .opacity))
                }
            }
            .padding()
            .background(Color.orange.opacity(0.1))
            .cornerRadius(12)
            
            Spacer()
        }
        .padding()
        .animation(.easeInOut, value: isReady)
    }
}

struct MockReadyCheckItem: View {
    let icon: String
    let title: String
    let subtitle: String
    let isChecked: Bool
    
    var body: some View {
        HStack(spacing: 12) {
            Image(systemName: icon)
                .font(.title3)
                .foregroundColor(isChecked ? .green : .gray)
            
            VStack(alignment: .leading, spacing: 2) {
                Text(title)
                    .font(.subheadline)
                    .fontWeight(.medium)
                    .foregroundColor(isChecked ? .primary : .secondary)
                
                Text(subtitle)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
        }
    }
}

// MARK: - ÏßÑÌñâÎ•† Ìó§Îçî (Í∏∞Ï°¥Í≥º ÎèôÏùº)
struct AssessmentProgressHeader: View {
    let currentStep: Int
    let totalSteps: Int
    
    var progress: Double {
        Double(currentStep) / Double(totalSteps - 1)
    }
    
    var body: some View {
        VStack(spacing: 16) {
            HStack {
                Button("Í±¥ÎÑàÎõ∞Í∏∞") {
                    // Í∏∞Î≥∏ Î™©ÌëúÎ°ú ÏÑ§Ï†ï
                    FitnessAssessmentManager.shared.hasCompletedAssessment = true
                }
                .foregroundColor(.secondary)
                
                Spacer()
                
                Text("\(currentStep + 1) / \(totalSteps)")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
            }
            
            ProgressView(value: progress)
                .progressViewStyle(LinearProgressViewStyle(tint: .green))
                .scaleEffect(y: 2)
        }
        .padding()
    }
}

// MARK: - ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î≤ÑÌäº (Í∏∞Ï°¥Í≥º ÎèôÏùº)
struct AssessmentNavigationButtons: View {
    @Binding var currentStep: Int
    let totalSteps: Int
    let onComplete: () -> Void
    
    var body: some View {
        HStack(spacing: 16) {
            if currentStep > 0 {
                Button("Ïù¥Ï†Ñ") {
                    withAnimation {
                        currentStep -= 1
                    }
                }
                .buttonStyle(.bordered)
            }
            
            Spacer()
            
            if currentStep < totalSteps - 1 {
                Button("Îã§Ïùå") {
                    withAnimation {
                        currentStep += 1
                    }
                }
                .buttonStyle(.borderedProminent)
            }
            // ÎßàÏßÄÎßâ Îã®Í≥ÑÏóêÏÑúÎäî "Ï§ÄÎπÑ ÏôÑÎ£å" ÌôîÎ©¥ÏóêÏÑú ÏßÅÏ†ë ÏãúÏûë
        }
        .padding()
    }
}
